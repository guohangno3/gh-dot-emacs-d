
****************************** --start-- 浏览、移动光标 ******************************

forward-char                        C-f                 前移一个字符
backward-char                       C-b                 后移一个字符
previous-line                       C-p                 上移一行
next-line                           C-n                 下移一行
forward-word                        M-f                 前移一个单词
backward-word                       M-b                 后移一个单词
beginning-of-line                   C-a                 移到行首
end-of-line                         C-e                 移动行尾
back-to-indentation                 M-m                 移到行首非空白区
forward-sentence                    M-e                 前移一个句子
backward-sentence                   M-a                 后移一个句子
backward-paragraph                  M-{                 左移一个段落
forward-paragraph                   M-}                 右移一个段落
scroll-up                           C-v                 上卷一屏
scroll-down                         M-v                 下卷一屏
beginning-of-buffer                 M-<                 前移到文件头
end-of-buffer                       M->                 后移到文件尾
forward-page                        C-x ]               前移一页
backward-page                       C-x [               后移一页
goto-line                           M-g g, M-g M-g      跳到指定行
goto-char                           M-g c               跳到指定字符
recenter-top-bottom                 C-l                 将当前行放到页顶、页中、页底
move-to-window-line-top-bottom      M-r                 移动到页面中间行首位置
                                    C-u C-@             回到刚才光标所在的位置
ecent-jump                                              记录下最近进行过的跳转，让你在最近的跳转之间移动

标记
C-x r SPC 然后随便按一个键，比如a; 
keep editting.... 
C-x r j 
输入a，就会跳到你刚在的那个光标处 

****************************** ---end--- 浏览、移动光标 ******************************



****************************** --start-- 编辑 ******************************

                            C-d                 删除光标位置上的字符
                            DEL                 删除光标前面的字符
                            M-d                 删除光标后面的单词
                            M-DEL               删除光标前面的单词
                            C-k                 删除从光标位置到行尾
                            C-0 C-k             删除到行首.
zap-to-char                 M-z char            删至字符 char 为止(包括char)
                            C-K                 删除到段尾(空行?).
                            M-k                 删除光标后面的句子
                            C-x DEL             删除光标前面的句子
                                    
                            M-\                 删除光标处的所有空格和 Tab 字符
                            M-SPC               删除光标处的所有空格和 Tab 字符，但留下一个。
                            C-x C-o             删除光标周围的空白行，保留当前行。
                            M-^                 将两行合为一行，删除之间的空白和缩进。
                                    
                            M-;                 注释。
                            C-g                 退出选定模式。
                                    
                            C-o                 在光标后插入空行
                            C-j                 在光标前插入空行
                            M-^                 将两行合为一行，删除之间的空白和缩进。
                            C-x C-x             互换插入点和文本标记的位置
kill-paragraph                                  删除光标后面的段落
backward-kill-paragraph                         删除光标前面的段落
                            M-/                 自动补全
                            C-Q <TAB>/alt+i     强制键入tab键

****************************** ---end--- 编辑 ******************************



****************************** --start-- 重复 ******************************

            M-n     重复执行n次后续命令
            C-u n   重复执行n次后续命令 (省略n时重复4次)
repeat      C-x z   重复刚才的命令

****************************** ---end--- 重复 ******************************



****************************** --start-- 撤销 ******************************

undo    C-_, C-x u      撤销前一个命令，用任意操作(比如移动光标)打断当前撤销，之后的撤销行为就成了重做行为

****************************** ---end--- 撤销 ******************************



****************************** --start-- 位置交换 ******************************

                        C-t             交换两个字符的位置
                        M-t             交换两个单词的位置
                        C-x C-t         交换两个文本行的位置
transpose-sentences                     交换两个句子的位置
transpose-paragraph                     交换两个段落的位置

****************************** ---end--- 位置交换 ******************************



****************************** --start-- 大小写 ******************************

                        M-c             单词首字母改为大写
                        M-u             单词的字母全部改为大写
                        M-l             单词的字母全部改为小写
                        C-x C-u         大写区域
                        C-x C-l         小写区域

****************************** ---end--- 大小写 ******************************



****************************** --start-- 复制、粘贴、剪切 ******************************

                        C-w, SHIFT-DEL  复制并删除文件块(选中内容，或者以光标上次位置与当前位置的区域为内容)
                        M-w             复制文本块
                        C-y             恢复被删除的文本或者粘贴最近删除或复制的文本
                        M-y             粘贴选择，用kill环中再前一个内容替换掉刚用 C-y 粘贴出来的内容。

****************************** ---end--- 复制、粘贴、剪切 ******************************



****************************** --start-- 标记与选择 ******************************

                        C-@/C-2             标记文本块的开始（或结束）位置。mark set之后，再C-s搜索字符串，可以实现选中到指定字符串，然后M-w复制或者C-w剪切。
                        C-x C-p         标记页面
                        C-x h           标记整个缓冲区
                        M-h             段落选择
                        shift+ 其他操作（比如 C-a,C-e,C-f,C-b 等）可以选中特定内容。注意：按大写键可以辅助该操作。

连续使用 kill 命令（M-w 除外），所 kill 掉的东西会智能的连在一起。还可以使用 C-M-w（紧接一个 kill 命令）强制下次删除加入上一个记录中。
shift+ 其他操作（比如 C-a,C-e,C-f,C-b 等）可以选中特定内容。注意：按大写键可以辅助该操作。

****************************** ---end--- 标记与选择 ******************************



****************************** --start-- 搜索、替换 ******************************

                        C-s                 向前开始非递增查找操作，再按一次则跳到下一个匹配项
                        C-s C-w             向前查找光标下的单词（不受换行符、空格、标点符号影响），把光标位置的单词做查找字符串，可按多个C-w增加选中内容
                        
                        C-s M-y             搜索复制下来的内容
                        C-s M-c             在搜索中改变大小写敏感
                        C-s C-y             开始递增查找，把光标位置到行尾之间的文本做查找字符串
                        C-r                 向后开始非递增查找操作，再按一次则跳到下一个匹配项
                        C-r C-w             向后开始单词查找（不受换行符、空格、标点符号影响）

                        C-g                 回到搜索开始前的位置(如果你仍然在搜索模式中)
                        C-M-s               使用正则表达式向后搜索
                        C-M-r               使用正则表达式向前搜索
                        C-s M-p, M-n        想要找搜索的历史记录
                        M-%                 替换
query-replace-regexp    M-x                 使用正则表达式搜索并替换：
                        M-s w               以字为单位进行搜索
occur                   M-s o               在当前buffer中进行搜索

mark set之后，再C-s搜索字符串，可以实现选中到指定字符串，然后M-w复制或者C-w剪切。
(setq-default case-fold-search t)或(setq-default case-fold-search nil)   永久改变搜索时的大小写敏感

M-x flush-lines ^$                          删除选中区域的所有空行

替换模式中的操作
替换当前匹配 ：Space 或 y
不要替换当前匹配：Del或n
仅仅替换当前匹配并退出(替换) ：.
替换并暂停(按Space或y继续) ：,
替换以下所有匹配 ：!
回到上一个匹配位置 ：^
退出替换：RETURN 或 q

可在正则表达式中使用的符号
^ 行首
$ 行尾
. 单个字符
.* 任意多个(包括没有)字符
\< 单词开头
\> 单词结尾
[] 括号中的任意一个字符(例如[a-z]表示所有的小写字母)

****************************** ---end--- 搜索、替换 ******************************



****************************** --start-- 窗口操作 ******************************

delete-window                       C-x 0       关闭本窗口
delete-other-windows                C-x 4 0     关闭本窗口及 buffer。
                                    C-x 1       关闭其他窗口。
                                    C-x 2       垂直拆分窗口。
                                    C-x 3       水平拆分窗口。
                                    C-x 5 b     在另一个窗口选择 buffer。
                                    C-x 5 0
                                    C-M-v       向下滚动下一个窗口
                                    C-M-V       向上滚动下一个窗口
other-window                        C-x o       切换到下一窗口
switch-to-buffer-other-window       C-x 4 b     在另一个窗口打开缓冲。
display-buffer                      C-x 4 C-o   在另一个窗口打开缓冲，但不选中那个窗口。
find-file-other-window              C-x 4 f     在另一个窗口打开文件。
dired-other-window                  C-x 4 d     在另一个窗口打开文件夹。
mail-other-window                   C-x 4 m     在另一个窗口写邮件。
find-file-read-only-other-window    C-x 4 r     在另一个窗口以只读方式打开文件。

compare-windows                     比较窗口内容

在各个窗口之间快速切换
通过以下设置，可以使用 M-1/M-2/M-3/.../M-9 来快速切换到第 1/2/3/.../9 窗口（窗口上有编号）。
事先下载window-numbering.el，放置到指定目录下，然后在.emacs 中做以下配置：
(add-to-list 'load-path(expand-file-name "~/.emacs.d/my-lisp"))
(require 'window-numbering)
(window-numbering-mode 1)

undo/redo之前的窗口操作(最爱)
安装Winner Mode,然后在.emacs中添加以下代码,
(winner-mode 1)
;; copied from http://puntoblogspot.blogspot.com/2011/05/undo-layouts-in-emacs.html
(global-set-key (kbd "C-x 4 u") 'winner-undo)
(global-set-key (kbd "C-x 4 r") 'winner-redo)


window-configuration-to-register    C-x r w <register>  存储窗口布局到register,gdb-many-windows比较常用
jump-to-register                    C-x r j <register>  载入存储的窗口布局


****************************** ---end--- 窗口操作 ******************************



****************************** --start-- 文件及buffer操作 ******************************

                    C-x C-f                 查找文件并且在新缓冲区中打开
                    C-x C-v                 读入另一个文件替换掉文件
                    C-x C-s                 保存buffer
                    C-x s                   保存所有buffer
                    C-x C-w                 把缓冲区内容写入一个文件
                    C-x k                   关闭buffer
                    C-x C-q                 当前buffer设为只读
                    C-x C-b, C-鼠标左键     显示可打开的buffer
                    C-x b                   切换到buffer，如果输入一个新的文件名则新建一个文件并且编辑，否则打开该文件
                    C-x i                   把文件插入到光标的当前位置
revert-buffer                               从硬盘重新读取文件
rename-buffer                               重命名当前缓冲区，重命名shell的buffer之后可开启多个shell buffer
swbuff                                      在最近浏览的buffer之间跳转

****************************** ---end--- 文件及buffer操作 ******************************



****************************** --start-- 帮助 ******************************

C-h f       显示函数的功能
C-h k       显示快捷键绑定的命令和它的作用
C-h v       显示变量的含义和值 或者 M-x describe-variable
C-h a       查找与之匹配的命令
C-h c       显示快捷键绑定的命令
C-h l       显示最后100个键入的内容
C-h w       显示命令被绑定到哪些快捷键上
C-h b       显示当前缓冲区所有可用的快捷键
C-h t       打开emacs教程
C-h i       打开info阅读器
C-h p       显示本机Elisp包的信息
C-h C-f     显示emacs FAQ

M-s C-h     列出所有以M-s打头的快捷键 (上面还绑定了几个给buffer着色的函数，挺好用)

****************************** ---end--- 帮助 ******************************



****************************** --start-- 退出与中断 ******************************

            C-x C-c     退出emacs
            C-g         中断，(搜索时?)退出选定模式

编译某行出错时，我想快速把光标定位到此行，我应该如何做？
A:可以使用C-x ' 。注意是 `，也就是F1 下面的那个，不是单引号。
实在不行，M-x next-error 也可以。

****************************** ---end--- 退出与中断 ******************************



****************************** --start-- 着色高亮 ******************************

hi-lock-mode
highlight-symbol-at-point           M-s h .         高亮光标处的词 (当前buffer)
highlight-regexp                    M-s h r
highlight-phrase                    M-s h p         输入一个正则表达式，给当前buffer中所有匹配该正则的字符串着上指定颜色
highlight-lines-matching-regexp     M-s h l         输入一个正则表达式，给当前buffer中包含该正则的行着上指定颜色
unhighlight-regexp                  M-s h u         取消着色 (当前buffer)

****************************** ---end--- 着色高亮 ******************************



****************************** --start-- gtags ******************************


********* make_gtags.sh file start *********
#!/bin/bash
#file name : make_gtags.sh
find . -regex ".*\.\(h\|c\|cpp\|cc\)" > gtags.files


SYS_INCLUDE_DIR=""
for var in $(find /usr /lib -type d -a -name include)
do
    SYS_INCLUDE_DIR+="${var}:"
done
或者
SYS_INCLUDE_DIR=$(
find /usr /lib -type d -a -name include | while read var
do
    echo -n "${var}:"
done
)

export GTAGSFORCECPP=1
export GTAGSLIBPATH="${SYS_INCLUDE_DIR}"
#export GTAGSLIBPATH=/usr/src/lib:/usr/src/sys
gtags -cv -f gtags.files

exit 0
********* make_gtags.sh file end ***********


gtags-find-tag-from-here            C-]
gtags-find-tag                      M-., C-c d, C-c t   跳转到函数、类型的定义处
gtags-find-symbol                   C-c s               变量定义以及引用位置
gtags-find-file                     C-c P
gtags-pop-stack                     C-t, M-*
gtags-find-pattern                  
gtags-find-tag-other-window         C-x 4 .
gtags-find-rtag                     C-c r
gtags-find-with-grep                C-c g

gtags-parse-file                    C-c f               查看文件中的tag列表
gtags-visit-rootdir                 C-c v


gtags-display-browser 	



gtags-find-with-idutils 	
gtags-mode 	
gtags-select-mode
gtags-select-tag 	
gtags-select-tag-by-event
gtags-select-tag-other-window 	

****************************** ---end--- gtags ******************************



****************************** --start-- 插件 ******************************

tabbar插件

tabbar-backward-tab                             在tab间进行移动
tabbar-forward-tab                              在tab间进行移动

highlight-symbol插件

highlight-symbol-next                           向前搜寻当前光标下的单词
highlight-symbol-prev                           向后搜寻当前光标下的单词

****************************** ---end--- 插件 ******************************



****************************** --start-- 绑定按键 ******************************

(global-set-key (kbd "M-h") 'highlight-symbol-at-point)
(define-key gtags-mode-map "\C-t" 'gtags-pop-stack)

"M-h" 与 "\eh" 同一意思

(同一按键绑定多个命令)
;; 定义一个函数
(global-set-key (kbd "<C-f9>") '(lambda ()
                  (interactive)
                  (newline)
                  (insert "haha")))
;; 也可以命名一个函数，再绑定
(defun hehe ()
  "doc-string"
  (interactive)
  (newline)
  (insert "haha")) 
(global-set-key (kbd "<C-f9>") 'hehe)

****************************** ---end--- 绑定按键 ******************************



****************************** --start-- debug ******************************

若启动报错，可在命令行带 --debug-init 参数启动

****************************** ---end--- debug ******************************



****************************** --start-- 其他 ******************************

如果你想在emacs的SHELL中调用某个程序，要把它的路径加入 "PATH" 中
如果你想在 elisp 中调用某个程序，要把它的路径加入 exec-path

启动慢，strace，给 /etc/hosts 里面 localhost 后面加上 hostname 即：
127.0.0.1 localhost localhost.localdomain ...
修改为
127.0.0.1 localhost myhostname localhost.localdomain ...

;; 设置变量
M-x set-variable<RET> indent-tabs-mode<RET> nil

;; tab键
C-Q <TAB>
alt+i

(setq auto-save-default nil) ;; 关闭临时文件

(global-font-lock-mode t) ;; 语法高亮




****************************** ---end--- 其他 ******************************



****************************** --start-- 矩形区域(列模式) ******************************

C-x r t        string-rectangle     在选定区域所有列前插入同样的字符
C-x r d        delete-rectangle     删除矩形区域，不留空白，后面的字符前移
C-x r k        kill-rectangle       就是剪切某个选定的矩形区域，用C-x r y可以贴上
C-x r y        yank-rectangle       类似于矩形区域的粘贴，就是将刚用C-x r k剪切的矩形区域粘贴过来

****************************** ---end--- 矩形区域(列模式) ******************************



****************************** --start-- 运行shell命令  ******************************

M-! cmd RET：打开一个名为“*Shell Command Output*“的窗口，并把该命令的执行结果显示在其中。按下C-x 1组合键可以关闭这个窗口。由于Shell命令的输出是在一个编辑缓冲区里，因此我们可以对它进行编辑、保存等操作。
M-| cmd RET：运行Shell命令，并使用编辑窗口中选定的区域作为该Shell命令的输入，然后可以选择是否用该Shell命令的输出来替换编辑窗口中选中的区域。
C-u M-! cmd RET：执行一条Shell命令，并将其输出放到编辑区中光标所在的位置处，而不将其输出到”Shell Command Output“窗口。
M-x shell：运行一个子Shell，该子Shell对应于emacs中的一个名为”*Shell*"的缓冲区，此后，我们就可以交互式的运行Shell命令了。
M-x term：运行一个子Shell，该子Shell对应于emacs中的一个名为“＊Terminal*”的缓冲区。使用该命令获得的子Shell是一个完整的Shell的模拟，与我们直接在Shell中操作没有什么差别。
M-x eshell：运行emacs shell。该Shell为emacs自己实现的一个shell，而前面运行的shell都为系统中的shell程序(例如：/bin/csh等）。我们可以通过设置变量shell-file-name来设置emacs所使用的默认shell

****************************** ---end--- 运行shell命令  ******************************



****************************** --start-- 16进制模式  ******************************

ALT+X hexl-mode   进入16进制模式
在这一模式，直接输入时还是输入按键的值，如输入3在光标位置出现3的ascii码33
想要输入16进制数，需用
ALT+X hexl-insert-hex-char 命令
或者
CTRL+ALT+X 命令
然后输入16进制数回车
比如输入40,就代表0x40.
退出模式命令
ALX+X hexl-mode-exit

****************************** ---end--- 16进制模式  ******************************



****************************** ---start--- 书签  ******************************

C-x r m     bookmark-set            设置一个书签
C-x r l     bookmark-bmenu-list     列出所有当前用户保存的书签

在*Bookmark List*这个ubffer里，有以下快捷键可以使用：
    -a      显示当前书签的标注信息；
    -A      在另一个buffer中显示所有书签的所有标注信息；
    -d      标记书签，以便用来删除(x - 执行删除);
    -e      编辑当前数显的标注信息;
    -m      标记书签，以便用于进一步显示和其他操作(v - 访问这个书签);
    -o      选中当前书签，并显示在另一个window中;
    -c-o    在另一个window中切换到当前这个书签；
    -r      重命名当前书签；
    -w      将当前书签的位置显示在minibuffer里。

C-x r b     bookmark-jump           跳转到书签
            helm-bookmarks          快速查找书签,并跳转到书签位置。

修改默认排序，将最近访问的书签放在最前面：
(defadvice bookmark-jump (after bookmark-jump activate)
    (let ((latest (bookmark-get-bookmark bookmark))))
    (setq bookmark-alist (delq latest bookmark-alist))
    (add-to-liat 'bookmark-alist latest)
    )

            
            
            bookmark-delete         删除一个书签;
            bookmark-save           手动保存书签(最新版本的emacs，在退出的时候会自动保存书签。)

            bookmark-default-file   emacs保存书签的文件,比如 ~/.emacs.d/.cache/bookmarks
            bookmark-save-flag      如果这个变量为一个数值，它表示e修改或新增多少次书签后，emacs会自动保存书签到磁盘
                                    1为每次改动都保存，nil表示不会主动保存书签，书费手动调用bookmark-save

    
bookmark+,对bookmark的一个扩展的包：
1.原始的bookmark只能对文件位置记录，bookmark+对孤立的buffer(没有文件关联的buffer)位置也能保存书签；
2.支持对书签进行打tag;
3.对文档的某个区域保存为书签，而不仅仅是某个位置；
4.记录了每个书签的访问次数，及最后一次的访问时间，可以基于他们排序；
5.多个书签可以有相同的名字；
6.可以对函数、变量等加书签。

****************************** ----end---- 书签  ******************************



============================================================ evil start ============================================================
[number]  d  object    OR    d  [number]  object
 A short list of objects:
    w - from the cursor to the end of the word, including the space.
    e - from the cursor to the end of the word, NOT including the space.
    $ - from the cursor to the end of the line.
    0 - from the cursor to the head of the line.
    d - delete a whole line
u               undo previous actions
CTRL-R          redo the commands (undo the undo's)
p               put the last deletion after the cursor.
r/R             replace one or more than one character.
cw              change part or all of a word
The change command works in the same way as delete.  The format is:
          [number]  c  object    OR    c  [number]  object
    The objects are also the same, such as w (word), $ (end of line) etc...
gg/G
/                   search forword
?                   search backword
*                   search the symbol at cursor
(/)                 next/preve session
{/}                 next/preve session
%                   find a matching ),], or }
:s/old/new/g        substitute 'new' for 'old' globally on the line
:s/thee/the         this command only changes the first occurrence on the line.
#,#s/old/new/g      change every occurrence of a character string between two lines, where #,# are the numbers of the two lines.
%s/old/new/g        change every occurrence in the whole buffer.
%s/old/new/gc       ask for confirmation each time
:line numer         moves to that line number
:!                  followed by an external command to execute that command
:w <FILENAME>       
#,# w FILENAME      save part of the file
:r FILENAME         insert the contents of a file
o                   open a line below the cursor and place you in insert state
a                   insert text AFTER the cursor.
A                   automatically appends text to the end of the line.
i/I

区域选择
v                   字符选择
V                   行选择
ctrl+v              矩形选择  
三个模式之间可以任意切换，重复命令就是退出。
在区域选择的情况下，d删除选择的区域，y复制选择的区域，p粘贴选择的区域，小写p在当前行的下一行粘贴。大写P在当前行的上一行粘贴
============================================================ evil end   ============================================================


============================================================ spacemacs start ============================================================
C-z             to toggle between Normal and Emacs state
<SPC> T n       to cycle to the next theme
<SPC> T F       fullscreen-frame

安装 & 使用
$ git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d  
$ emacs  
配置文件
Spacemacs 的配置文件位于 ~/.spacemacs 中，我们只需要修改这个文件就可以制定自己的配置了。

Modify spacemacs-start-directory variable
This solution is better suited to "embed" Spacemacs into your own configuration. Say you cloned Spacemacs in  ~/.emacs.d/spacemacs/  then drop these lines in  ~/.emacs.d/init.el :
(setq spacemacs-start-directory "~/.emacs.d/spacemacs/")
(load-file (concat spacemacs-start-directory "init.el"))


could not load evil-indent-textobject
这是一系列的错误，根本原因就是下载下来的 package load 出错了，或者根本没有下载成功。
一般的解决方法是先去.emacs/elpa 目录去查找这个 package，检查这个 package 是否已经成功下载。（成功下载指的是对应的.el 文件和.elc 文件都存在）
其次，在启动 Emacs 以后，运行 byte-compile-file 来重新编译这个 package 下面所有的文件。因为 Emacs 默认是加载 elc 文件。
一般情况下，上面的方法可以解决 60%以上的 package 加载错误。
最后，通过 emacs –debug-init 来启动，通过 error trace 来定位问题所在。
如果你还是解决不了问题，可以 fork 我的配置，然后把 Spacemacs 更新到最新就可以用了。

Spacemacs 启动速度特别慢
这个真是冤枉啊！！
其实罪魁祸首是 Helm 这个 package。
你只需要在你的.spacemacs 或者.spacemacs.d/init.el 文件中的 user-init 方法中添加下列代码后，重启 Spacemacs 即可：
;; https://github.com/syl20bnr/spacemacs/issues/2705
(setq tramp-ssh-controlmaster-options "-o ControlMaster=auto -o ControlPath='tramp.%%C' -o ControlPersist=no")
至于是什么原因导致的，我具体也不清楚，大家可以去看看上面的 issue 链接。



一般情况下，我们只需要在 dotspacemacs-configuration-layers 中添加自己需要的 layer 就可以了。

常用快捷键
配置文件管理

SPC h T                                     begin an Evil-adapted Vimtutor
<SPC> u                                     Universal argument
SPC f e h       helm-spacemacs              quickly search for a package and get the name of the layers using it(Configuration layers and Package discovery).
<SPC> ?         Key bindings discovery      

SPC f e d   快速打开配置文件 .spacemacs
SPC f e R   同步配置文件
SPC q z     kill frame
SPC T s     theme

**** Find Function definition
 C-h f & C-h C-f
**** Find variable definition
 C-h v & C-h C-v
**** Navigation functions in current file
 SPC s l
**** Go to your .spacemacs file
 SPC f e d 
**** Go to .emacs.d/init.el
 SPC f e i
**** Find an elpa library
 SPC h L 
**** Find Spacemacs layers, docs and package configuration
 SPC h SPC
 
 org
 C-c C-o    访问链接

 
  Org Key bindings
  
** Org

| Key Binding | Description                    |
|-------------+--------------------------------|
| ~SPC a o #~ | org agenda list stuck projects |
| ~SPC a o /~ | org occur in agenda files      |
| ~SPC a o a~ | org agenda list                |
| ~SPC a o c~ | org capture                    |
| ~SPC a o e~ | org store agenda views         |
| ~SPC a o l~ | org store link                 |
| ~SPC a o m~ | org tags view                  |
| ~SPC a o o~ | org agenda                     |
| ~SPC a o O~ | org clock out                  |
| ~SPC a o s~ | org search view                |
| ~SPC a o t~ | org todo list                  |
| ~SPC C c~   | org-capture                    |

** Org with evil-org-mode

| Key Binding                                  | Description                                  |
|----------------------------------------------+----------------------------------------------|
| ~SPC m <dotspacemacs-major-mode-leader-key>~ | org-ctrl-c-ctrl-c                            |
| ~SPC m *~                                    | org-ctrl-c-star                              |
| ~SPC m RET~                                  | org-ctrl-c-ret                               |
| ~SPC m -~                                    | org-ctrl-c-minus                             |
| ~SPC m '​~                                    | org-edit-special                             |
| ~SPC m ^~                                    | org-sort                                     |
| ~SPC m /~                                    | org-sparse-tree                              |
| ~SPC m .~                                    | org-time-stamp                               |
| ~SPC m !~                                    | org-time-stamp-inactive                      |
| ~SPC m a~                                    | org-agenda                                   |
| ~SPC m b~                                    | org-tree-to-indirect-buffer                  |
| ~SPC m A~                                    | org-archive-subtree                          |
| ~SPC m c~                                    | org-capture                                  |
| ~SPC m C~                                    | evil-org-recompute-clocks                    |
| ~SPC m d~                                    | org-deadline                                 |
| ~SPC m D~                                    | org-insert-drawer                            |
| ~SPC m e~                                    | org-export-dispatch                          |
| ~SPC m f~                                    | org-set-effort                               |
| ~SPC m I~                                    | org-clock-in                                 |
| ~SPC m l~                                    | org-open-at-point                            |
| ~SPC m n~                                    | org-narrow-to-subtree                        |
| ~SPC m N~                                    | widen                                        |
| ~SPC m O~                                    | org-clock-out                                |
| ~SPC m P~                                    | org-set-property                             |
| ~SPC m q~                                    | org-clock-cancel                             |
| ~SPC m R~                                    | org-refile                                   |
| ~SPC m s~                                    | org-schedule                                 |
| ~SPC m T~                                    | org-show-todo-tree                           |
| ~SPC m L~                                    | org-shiftright                               |
| ~SPC m H~                                    | org-shiftleft                                |
| ~SPC m K~                                    | org-shiftup                                  |
| ~SPC m J~                                    | org-shiftdown                                |
| ~SPC m C-S-l~                                | org-shiftcontrolright                        |
| ~SPC m C-S-h~                                | org-shiftcontrolleft                         |
| ~SPC m C-S-j~                                | org-shiftcontroldown                         |
| ~SPC m C-S-k~                                | org-shiftcontrolup                           |
| ~SPC s j~                                    | spacemacs/jump-in-buffer (jump to a heading) |

* Tables

| Key Binding   | Description                                                                |
|---------------+----------------------------------------------------------------------------|
| ~SPC m t a~   | Align the table at point by aligning all vertical bars                     |
| ~SPC m t b~   | Blank the current table field or active region                             |
| ~SPC m t c~   | Convert from =org-mode= table to table.el and back                         |
| ~SPC m t d c~ | Delete a column from the table                                             |
| ~SPC m t d r~ | Delete the current row or horizontal line from the table                   |
| ~SPC m t e~   | Replace the table field value at the cursor by the result of a calculation |
| ~SPC m t E~   | Export table to a file, with configurable format                           |
| ~SPC m t h~   | Go to the previous field in the table                                      |
| ~SPC m t H~   | Move column to the left                                                    |
| ~SPC m t i c~ | Insert a new column into the table                                         |
| ~SPC m t i h~ | Insert a horizontal-line below the current line into the table             |
| ~SPC m t i H~ | Insert a hline and move to the row below that line                         |
| ~SPC m t i r~ | Insert a new row above the current line into the table                     |
| ~SPC m t I~   | Import a file as a table                                                   |
| ~SPC m t j~   | Go to the next row (same column) in the current table                      |
| ~SPC m t J~   | Move table row down                                                        |
| ~SPC m t K~   | Move table row up                                                          |
| ~SPC m t l~   | Go to the next field in the current table, creating new lines as needed    |
| ~SPC m t L~   | Move column to the right                                                   |
| ~SPC m t n~   | Query for a size and insert a table skeleton                               |
| ~SPC m t N~   | Use the table.el package to insert a new table                             |
| ~SPC m t p~   | Plot the table using org-plot/gnuplot                                      |
| ~SPC m t r~   | Recalculate the current table line by applying all stored formulas         |
| ~SPC m t s~   | Sort table lines according to the column at point                          |
| ~SPC m t t f~ | Toggle the formula debugger in tables                                      |
| ~SPC m t t o~ | Toggle the display of Row/Column numbers in tables                         |
| ~SPC m t w~   | Wrap several fields in a column like a paragraph                           |

*** Tree

| Key Binding | Description           |
|-------------+-----------------------|
| ~SPC m S l~ | org-demote-subtree    |
| ~SPC m S h~ | org-promote-subtree   |
| ~SPC m S k~ | org-move-subtree-up   |
| ~SPC m S j~ | org-move-subtree-down |

| Key Binding | Description                     |
|-------------+---------------------------------|
| ~TAB~       | org-cycle                       |
| ~$~         | org-end-of-line                 |
| ~^~         | org-beginning-of-line           |
| ~<~         | org-metaleft                    |
| ~>~         | org-metaright                   |
| ~gh~        | outline-up-heading              |
| ~gj~        | org-forward-heading-same-level  |
| ~gk~        | org-backward-heading-same-level |
| ~gl~        | outline-next-visible-heading    |
| ~t~         | org-todo                        |
| ~T~         | org-insert-todo-heading nil     |
| ~H~         | org-beginning-of-line           |
| ~L~         | org-end-of-line                 |
| ~o~         | always-insert-item              |
| ~O~         | org-open-above                  |

| Key Binding | Description                                |
|-------------+--------------------------------------------|
| ~M-l~       | org-metaright                              |
| ~M-h~       | org-metaleft                               |
| ~M-k~       | org-metaup                                 |
| ~M-j~       | org-metadown                               |
| ~M-L~       | org-shiftmetaright                         |
| ~M-H~       | org-shiftmetaleft                          |
| ~M-K~       | org-shiftmetaup                            |
| ~M-J~       | org-shiftmetadown                          |
| ~M-o~       | org-insert-heading+org-metaright           |
| ~M-t~       | org-insert-todo-heading nil+ org-metaright |

** Element insertion

| Key Binding | Description                      |
|-------------+----------------------------------|
| ~SPC m h i~ | org-insert-heading-after-current |
| ~SPC m h I~ | org-insert-heading               |
| ~SPC m h s~ | org-insert-subheading            |
| ~SPC m i f~ | org-insert-footnote              |
| ~SPC m i l~ | org-insert-link                  |

*** Links

| Key Binding | Description       |
|-------------+-------------------|
| ~RET~       | org-open-at-point |

*** Emphasis

| Key Binding | Description                |
|-------------+----------------------------|
| ~SPC m x b~ | make region bold           |
| ~SPC m x c~ | make region code           |
| ~SPC m x i~ | make region italic         |
| ~SPC m x r~ | clear region emphasis      |
| ~SPC m x s~ | make region strike-through |
| ~SPC m x u~ | make region underline      |
| ~SPC m x v~ | make region verbose        |

*** Tagging

| Key Binding | Description  |
|-------------+--------------|
| ~SPC m :~   | org-set-tags |

*** Navigating in calendar

| Key Binding | Description        |
|-------------+--------------------|
| ~M-l~       | One day forward    |
| ~M-h~       | One day backward   |
| ~M-j~       | One week forward   |
| ~M-k~       | One week backward  |
| ~M-L~       | One month forward  |
| ~M-H~       | One month backward |
| ~M-J~       | One year forward   |
| ~M-K~       | One year backward  |

** Capture buffers and src blocks
=org-capture-mode= and =org-src-mode= both support the confirm and abort
conventions.

| Key Binding                                  | Description                            |
|----------------------------------------------+----------------------------------------|
| ~SPC m <dotspacemacs-major-mode-leader-key>~ | confirm in =org-capture-mode=          |
| ~SPC m '​~                                    | confirm in =org-src-mode=              |
| ~SPC m c~                                    | confirm                                |
| ~SPC m a~                                    | abort                                  |
| ~SPC m k~                                    | abort                                  |
| ~SPC m r~                                    | org-capture-refile in org-capture-mode |

** Org agenda

*** Keybindings
The evilified org agenda supports the following bindings:

| Key Binding          | Description                       |
|----------------------+-----------------------------------|
| ~M-SPC~ or ~s-M-SPC~ | org-agenda transient state        |
| ~SPC m :~            | org-agenda-set-tags               |
| ~SPC m a~            | org-agenda                        |
| ~SPC m d~            | org-agenda-deadline               |
| ~SPC m f~            | org-agenda-set-effort             |
| ~SPC m I~            | org-agenda-clock-in               |
| ~SPC m O~            | org-agenda-clock-out              |
| ~SPC m p~            | org-pomodoro (if package is used) |
| ~SPC m P~            | org-agenda-set-property           |
| ~SPC m q~            | org-agenda-refile                 |
| ~SPC m Q~            | org-agenda-clock-cancel           |
| ~SPC m s~            | org-agenda-schedule               |
| ~M-j~                | next item                         |
| ~M-k~                | previous item                     |
| ~M-h~                | earlier view                      |
| ~M-l~                | later view                        |
| ~gr~                 | refresh                           |
| ~gd~                 | toggle grid                       |
| ~C-v~                | change view                       |
| ~RET~                | org-agenda-goto                   |
| ~M-RET~              | org-agenda-show-and-scroll-up     |

*** Org agenda transient state
Use ~M-SPC~ or ~s-M-SPC~ in an org agenda buffer to activate its transient state.
The transient state aims to list the most useful org agenda commands and
visually organize them by category. The commands associated with each binding
are listed bellow.

| Keybinding  | Description         | Command                           |
|-------------+---------------------+-----------------------------------|
| Entry       |                     |                                   |
|-------------+---------------------+-----------------------------------|
| ~ht~        | set status          | org-agenda-todo                   |
| ~hk~        | kill                | org-agenda-kill                   |
| ~hr~        | refile              | org-agenda-refile                 |
| ~hA~        | archive             | org-agenda-archive-default        |
| ~hT~        | set tags            | org-agenda-set-tags               |
| ~hp~        | set priority        | org-agenda-priority               |
|-------------+---------------------+-----------------------------------|
| Visit entry |                     |                                   |
|-------------+---------------------+-----------------------------------|
| ~SPC~       | in other window     | org-agenda-show-and-scroll-up     |
| ~TAB~       | & go to location    | org-agenda-goto                   |
| ~RET~       | & del other windows | org-agenda-switch-to              |
| ~o~         | link                | link-hint-open-link               |
|-------------+---------------------+-----------------------------------|
| Filter      |                     |                                   |
|-------------+---------------------+-----------------------------------|
| ~ft~        | by tag              | org-agenda-filter-by-tag          |
| ~fr~        | refine by tag       | org-agenda-filter-by-tag-refine   |
| ~fc~        | by category         | org-agenda-filter-by-category     |
| ~fh~        | by top headline     | org-agenda-filter-by-top-headline |
| ~fx~        | by regexp           | org-agenda-filter-by-regexp       |
| ~fd~        | delete all filters  | org-agenda-filter-remove-all      |
|-------------+---------------------+-----------------------------------|
| Date        |                     |                                   |
|-------------+---------------------+-----------------------------------|
| ~ds~        | schedule            | org-agenda-schedule               |
| ~dd~        | set deadline        | org-agenda-deadline               |
| ~dt~        | timestamp           | org-agenda-date-prompt            |
| ~+~         | do later            | org-agenda-do-date-later          |
| ~-~         | do earlier          | org-agenda-do-date-earlier        |
|-------------+---------------------+-----------------------------------|
| Toggle      |                     |                                   |
|-------------+---------------------+-----------------------------------|
| ~tf~        | follow              | org-agenda-follow-mode            |
| ~tl~        | log                 | org-agenda-log-mode               |
| ~ta~        | archive             | org-agenda-archives-mode          |
| ~tr~        | clock report        | org-agenda-clockreport-mode       |
| ~td~        | diaries             | org-agenda-toggle-diary           |
|-------------+---------------------+-----------------------------------|
| View        |                     |                                   |
|-------------+---------------------+-----------------------------------|
| ~vd~        | day                 | org-agenda-day-view               |
| ~vw~        | week                | org-agenda-week-view              |
| ~vt~        | fortnight           | org-agenda-fortnight-view         |
| ~vm~        | month               | org-agenda-month-view             |
| ~vy~        | year                | org-agenda-year-view              |
| ~vn~        | next span           | org-agenda-later                  |
| ~vp~        | prev span           | org-agenda-earlier                |
| ~vr~        | reset               | org-agenda-reset-view             |
|-------------+---------------------+-----------------------------------|
| Clock       |                     |                                   |
|-------------+---------------------+-----------------------------------|
| ~ci~        | in                  | org-agenda-clock-in               |
| ~co~        | out                 | org-agenda-clock-out              |
| ~ck~        | cancel              | org-agenda-clock-cancel           |
| ~cj~        | jump                | org-agenda-clock-goto             |
|-------------+---------------------+-----------------------------------|
| Other       |                     |                                   |
|-------------+---------------------+-----------------------------------|
| ~gr~        | reload              | org-agenda-redo                   |
| ~.~         | go to today         | org-agenda-goto-today             |
| ~gd~        | go to date          | org-agenda-goto-date              |

** Pomodoro

| Key Binding | Description       |
|-------------+-------------------|
| ~SPC m p~   | starts a pomodoro |

** Presentation
org-present must be activated explicitly by typing: ~SPC SPC org-present~

| Key Binding | Description    |
|-------------+----------------|
| ~h~         | previous slide |
| ~l~         | next slide     |
| ~q~         | quit           |

** Org-MIME

| Key Binding | Description                                       |
|-------------+---------------------------------------------------|
| ~SPC m M~   | in =message-mode= buffers convert into html email |
| ~SPC m m~   | send current buffer as HTML email message         |

** Org-download

| Key Binding | Description     |
|-------------+-----------------|
| ~SPC m i s~ | Take screenshot |
| ~SPC m i y~ | Yank image url  |

** Org-projectile

| Key Binding       | Description                                             |
|-------------------+---------------------------------------------------------|
| ~SPC a o p~       | Capture a TODO for the current project                  |
| ~SPC u SPC a o p~ | Capture a TODO for any given project (choose from list) |
| ~SPC p o~         | Go to the TODOs for the current project                 |



 
 
文件管理
SPC f f 打开文件（夹），相当于 $ open xxx 或 $ cd /path/to/project
SPC p f 搜索文件名，相当于 ST / Atom 中的 Ctrl + p
SPC s a p 搜索内容，相当于 $ ag xxx 或 ST / Atom 中的 Ctrl + Shift + f

SPC b k 关闭当前 buffer
SPC SPC 搜索当前文件


文件窗口模式
SPC f t         neotree
SPC a r         ranger
SPC f j         dired
SPC w m         最大化当前窗口
SPC w d         关闭当前窗口

窗口管理

SPC f t 打开/关闭侧边栏，相当于 ST / Atom 中的 Ctrl(cmd) + k + b

SPC 0 光标跳转到侧边栏（NeoTree）中
SPC n(数字) 光标跳转到第 n 个 buffer 中

SPC w s | SPC w -           水平分割窗口
SPC w v | SPC w /           垂直分割窗口
SPC w c                     关闭当前窗口
C-h m                       当前所有开启的全部 Minor Mode 的信息
SPC j =                     自动对齐，相当于 beautify
M-x info                    

Shell 集成 (必须先配置 Shell layer)

SPC '(单引号) 打开/关闭 Shell
C-k 前一条 shell 命令，相当于在 shell 中按上箭头
C-j 后一条 shell 命令，相当于在 shell 中按下箭头



缩写
(abbrev-mode t)
(define-abbrev-table 'global-abbrev-table '(
                                            ;; signature
                                            ("8zl" "zilongshanren")
                                            ;; emacs regex
                                            
                                            ))

项目管理

SPC p p 切换项目
SPC p D 在 dired 中打开项目根目录
SPC p f 在项目中搜索文件名，相当于 ST / Atom 中的 Ctrl + p
SPC p R 在项目中替换字符串，根据提示输入「匹配」和「替换」的字符串，然后输入替换的方式：
E 修改刚才输入的「替换」字符串
RET 表示不做处理
y 表示只替换一处
Y 表示替换全部
n 或 delete 表示跳过当前匹配项，匹配下一项
^ 表示跳过当前匹配项，匹配上一项
, 表示替换当前项，但不移动光标，可和 n 或 ^ 配合使用

对齐

SPC j = 自动对齐，相当于 beautify

Shell 集成 (必须先配置 Shell layer)

SPC '(单引号) 打开/关闭 Shell
C-k 前一条 shell 命令，相当于在 shell 中按上箭头
C-j 后一条 shell 命令，相当于在 shell 中按下箭头

让 Spacemacs 支持 EditorConfig

EditorConfig 是一个配置文件，一般位于项目的根目录，它可以让不同的编辑器和IDE 都按照相同的格式来格式化代码，对于项目的维护者来说是一个很好的工具。

Spacemacs 也支持 EditorConfig，只需要在配置文件中添加配置即可。下面以 OS X 为例，通过以下步骤即可让 Spacemacs 支持 EditorConfig：
1.$ brew install editorconfig

2.在 ~/.spacemacs 中的 dotspacemacs-additional-packages 中添加 editorconfig：


dotspacemacs-additional-packages
 '(
   editorconfig
   )

 


3.创建 .editorconfig 文件，写上自己喜欢的配置。

4.在 ~/.spacemacs 中的 docspacemacs/user-config 中加入 (editorconfig-mode 1)。
5.完。

Git 集成 (必须先配置Magit 的使用)

Git 是一个优秀的版本控制工具，我们可以在 .spacemacs 的 dotspacemacs-configuration-layers 列表中添加 git 就可以集成 git 了。

下面是一些常用的 git 命令，前缀为 g。


Git

Magit


git init SPC g i 
git status SPC g s 
git add SPC g s 弹出层选中文件然后按 s 
git add currentFile SPC g S 
git commit SPC g c c 
git push SPC g P 按提示操作 
git checkout xxx SPC g C 
git checkout -- xxx SPC g s 弹出层选中文件然后按 u 
git log SPC g l l 

在 commit 时，我们输入完 commit message 之后，需要按 C-c C-c 来完成 commit 操作，也可以按 C-c C-k 来取消 commit 。

设置文件默认的主模式

虽然我们可以通过 M-x 来设置文件的主模式，但这种方式只是在单独修改某个文件的主模式时好用，如果要把所有同类型的文件都改成其他模式，这种方式的效率就太低了。

在 Spacemacs 中，我们可以用 auto-mode-alist 来设置某一类文件默认的主模式。

我们只需要在 ~/.spacemacs 中的 user-config 中加入下面代码即可：


(add-to-list 'auto-mode-alist '("\\.js\\'" . react-mode))

 

上面代码会用 react-mode 打开所有 .js 文件。

设置主模式的 hook

主模式的 hook 是一个 elisp 函数，这个函数会在主模式加载时调用，常用于为特定的主模式自定义配置。
如我想在 js2-mode 中作出如下配置：
移除检查分号的提示 (否则当行末缺少了分号的时候，会给出烦人的提示)
支持 Node.js 内建函数 (否则当出现 require, module 之类的时候会提示未定义变量)
设置缩进为 2

这时候我可以通过如下方式来设置：


;; hooks
(defun my-js-mode-hook ()
  (setq js2-basic-offset 2)
  (setq js-indent-level 2)
  (setq js2-include-node-externs t)
  (setq js2-strict-missing-semi-warning nil))

(add-hook 'js2-mode-hook 'my-js-mode-hook)

 











有一个leader键被称为主模式Leader键，默认是~，这个键在所有的主模式命令中是 SPC m 的快捷方式。
Evil辅导

如果你要学习VIm快捷键（强烈推荐，即使你使用Emacs风格也可以受益良多），按下 SPC h T 来开启Evil-adapted Vimtutor。


普遍的观点

在Vim编辑风格下的普遍默认使用 SPC u 代替 C-u。因为C-u在Vim中被用于滚动


配置层和探索包

通过使用 helm-spacemacs 和 SPC f e h 你能够在一个包中快速搜索和获取层使用的名字。你也可以很容易的去一个层的README.org文件和一个包的初始化函数。


快捷键探索
感谢一个键， 无论何时一个前缀命令被按下后（例如 SPC),，一秒钟之后会出现一个缓冲区并列出和这个前缀相关的可选键


通过按下面这组键可以搜索特定的快捷键


SPC ？


精简这些SPC前缀的快捷键列表，类似下面正则表达式这样的模式类型


SPC b


这将列出所有和缓冲区相关的快捷键绑定


功能描述

功能描述是Emacs内置强大的命令，用于获取函数、变量、模式的描述等等，这些命令已被绑定：

Key Binding	Description
SPC h d f	describe-function
SPC h d k	describe-key
SPC h d m	describe-mode
SPC h d v	describe-variable



入门

一些入门知识编译在了 HOWTOs.org文件中。



Features

Find Function definition

C-h f & C-h C-f

Find variable definition

C-h v & C-h C-v

Navigation functions in current file

SPC s l

Go to your .spacemacs file

SPC f e d

Go to .emacs.d/init.el

SPC f e i

Find an elpa library

SPC h L

Find Spacemacs layers, docs and package configuration

SPC f e h



Workflow

Navigation spacemacs layers/docs

SPC h SPC -> SPC s l -> c-h c-f/c-v/f/v

Navigation elpa libraries

SPC h L -> SPC s l -> c-h c-f/c-v/f/v

Navigation you own configuration

SPC f e d -> SPC s l -> c-h c-f/c-v/f/v

navigation spacemacs repository

SPC f e i -> SPC s l -> c-h c-f/c-v/f/v






安装插件
首先，需要将 melpa 代码库添加到你的插件列表中，才能安装 Rust 需要的插件。将下面的代码片段加入你的~/.emacs.d/init.el 文件中。

;; Add melpa repository to archives
(add-to-list 'package-archives
    '("melpa" . "http://melpa.milkbox.net/packages/") t)

;; Initialize packages
(package-initialize)



运行下面的命令，更新插件列表。

M-x eval-buffer
M-x package-refresh-contents
然后，就可以安装插件，在 Emacs 中使用 Rust 了。运行 M-x package-list-packages，用 i 标记下述插件进行安装，当所有的插件选择好了之后，用 x 执行安装。

company
company-racer
racer
flycheck
flycheck-rust
rust-mode
将下面的代码片段加入你的~/.emacs.d/init.el 文件：

;; Enable company globally for all mode
(global-company-mode)

;; Reduce the time after which the company auto completion popup opens
(setq company-idle-delay 0.2)

;; Reduce the number of characters before company kicks in
(setq company-minimum-prefix-length 1)
;; Set path to racer binary
(setq racer-cmd "/usr/local/bin/racer")

;; Set path to rust src directory
(setq racer-rust-src-path "/Users/YOURUSERNAME/.rust/src/")

;; Load rust-mode when you open `.rs` files
(add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))

;; Setting up configurations when you load rust-mode
(add-hook 'rust-mode-hook

     '(lambda ()
     ;; Enable racer
     (racer-activate)

     ;; Hook in racer with eldoc to provide documentation
     (racer-turn-on-eldoc)

     ;; Use flycheck-rust in rust-mode
     (add-hook 'flycheck-mode-hook #'flycheck-rust-setup)

     ;; Use company-racer in rust mode
     (set (make-local-variable 'company-backends) '(company-racer))

     ;; Key binding to jump to method definition
     (local-set-key (kbd "M-.") #'racer-find-definition)

     ;; Key binding to auto complete and indent
     (local-set-key (kbd "TAB") #'racer-complete-or-indent)))

     
     
配置 Racer
Racer 需要 Rust 的源代码用于自动补全。

git clone https://github.com/rust-lang/rust.git ~/.rust
重新启动 Emacs 并打开一个 Rust 源代码文件。

结论
现在，可以在 Emacs 中编辑 Rust 源代码文件了。功能总结如下：

语法高亮显示和自动缩进
自动补全
动态语法错误检查
跳转到函数定义
内嵌文档

Spacemacs安装

前面说了,Spacemacs就是个Emacs的配置文件库，因此我们可以通过非常简单的方式安装它：

git clone https://github.com/syl20bnr/spacemacs ~/.emacs.d
mv ~/.emacs ~/_emacs.backup
cd ~/.emacs.d
echo $(git describe --tags $(git rev-list --tags --max-count=1)) | xargs git checkout
其中，后三行是笔者加的，这里必须要吐槽一下的是，Spacemacs的master分支实际上是极其落后而且有错误的！其目前的release都是从develop分支上打的tag。

因此，一！定！不！要！用！主！分！支！

最后，之所以要加最后一行，这是笔者安装的时候的release的一个小bug，没有这个文件的话,emacs并不会顺利的完成初始化。

好了，配置文件我们已经搞定了，接下来，启动你的emacs，spacemacs会自动的去网上下载你需要的插件安装包。另外，能自备梯子的最好，因为你要下的东西不大，但是这个网络确实比较捉急。

前期准备

为了让Spacemacs支持Rust，我们还需要一点小小的配置。首先，请参照前期准备，安装好你的racer。

在这里，强烈建议将racer的环境变量加入到系统变量中(通常他们在/etc/profile/里进行配置)并重新启动系统，因为真的有很多人直接点击emacs的图标启动它的，这样做很可能导致emacs并不继承自己的环境变量，这是很令人无奈的。

完成配置
修改标准的Spacemacs配置。

Spacemacs文档中提供了一份标准的spacemacs配置文件，你可以将其加入到你自己的~/.spacemacs文件中。

这里，我们需要修改的是其关于自定义插件的部分：

(defun dotspacemacs/layers ()
  "Configuration Layers declaration.
You should not put any user code in this function besides modifying the variable
values."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '()
   ;; List of configuration layers to load. If it is the symbol `all' instead
   ;; of a list then all discovered layers will be installed.
   dotspacemacs-configuration-layers
   '(
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press <SPC f e R> (Vim style) or
     ;; <M-m f e R> (Emacs style) to install them.
     ;; ----------------------------------------------------------------
     auto-completion
     better-defaults
     git
     spell-checking
     syntax-checking
     version-control
     rust
     )
   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages then consider to create a layer, you can also put the
   ;; configuration in `dotspacemacs/config'.
   dotspacemacs-additional-packages '()
   ;; A list of packages and/or extensions that will not be install and loaded.
   dotspacemacs-excluded-packages '()
   ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
   ;; are declared in a layer which is not a member of
   ;; the list `dotspacemacs-configuration-layers'. (default t)
   dotspacemacs-delete-orphan-packages t))

;; ...
;; 以下配置文件内容省略
;; ...
注意dotspacemacs-configuration-layers的配置和标准配置文件的不同。

将配置文件保存，然后重启你的emacs，当然，我们也可以按SPC f e R来完成重载配置文件的目的，然后你会发现emacs会开始下一轮下载，稍等其完成。

在上一步中，我们已经完成了对Racer的环境变量的配置，所以，现在你的Spacemacs已经配置完成了！这种简便的配置形式，几乎能和Atom抗衡了。

按键绑定

如下，spacemacs默认提供了几种按键绑定，但是，笔者并不觉得这些很好用，还是更喜欢用命令行。

Key Binding	Description
~SPC m c c~	compile project with Cargo
~SPC m c t~	run tests with Cargo
~SPC m c d~	generate documentation with Cargo
~SPC m c x~	execute the project with Cargo
尝试
现在开始，我们可以打开一个Cargo项目，并且去使用它了。你会惊讶的发现racer/flycheck/company这三个插件配合在一起的时候是那么的和谐简单。




could not load evil-indent-textobject

这是一系列的错误，根本原因就是下载下来的 package load 出错了，或者根本没有下载成功。

一般的解决方法是先去.emacs/elpa 目录去查找这个 package，检查这个 package 是否已经成功下载。（成功下载指的是对应的.el 文件和.elc 文件都存在）

其次，在启动 Emacs 以后，运行 byte-compile-file 来重新编译这个 package 下面所有的文件。因为 Emacs 默认是加载 elc 文件。

一般情况下，上面的方法可以解决 60%以上的 package 加载错误。

最后，通过 emacs –debug-init 来启动，通过 error trace 来定位问题所在。

如果你还是解决不了问题，可以 fork 我的配置，然后把 Spacemacs 更新到最新就可以用了。

Spacemacs 启动速度特别慢

这个真是冤枉啊！！

其实罪魁祸首是 Helm 这个 package。

你只需要在你的.spacemacs 或者.spacemacs.d/init.el 文件中的 user-init 方法中添加下列代码后，重启 Spacemacs 即可：

;; https://github.com/syl20bnr/spacemacs/issues/2705
(setq tramp-ssh-controlmaster-options "-o ControlMaster=auto -o ControlPath='tramp.%%C' -o ControlPersist=no")
至于是什么原因导致的，我具体也不清楚，大家可以去看看上面的 issue 链接。






将private-layer挪出来
默认在~/.emacs.d/private目录下，那太傻，我根本不动spacemacs的源码，都是自己创建init-package-layer
configuration-layer-private-directory "~/dot-spacemacs/"



Org Mode
老实说外行用emacs第一动力应该是org mode，但org mode范围很广，强烈推荐看官方manual，下面是官方推荐的设置，我觉得太赞了。
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)





配置elpa
把下面的代码放进spacemacs/init中
  (setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                           ("marmalade" . "https://marmalade-repo.org/packages/")
                           ("melpa" . "http://melpa.org/packages/")))

                           
                           
                           
                           
C-h f interactive
